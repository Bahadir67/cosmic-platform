'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth, useAuthActions } from '@/store/authStore';

export default function LoginPage() {
  const router = useRouter();
  const { isAuthenticated, isLoading, error } = useAuth();
  const { login, register, clearError, initialize } = useAuthActions();

  // Local state
  const [mode, setMode] = useState<'login' | 'register'>('login');
  const [focusedField, setFocusedField] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [showSuccess, setShowSuccess] = useState(false);

  // Initialize auth store on mount
  useEffect(() => {
    //initialize();
  }, [initialize]);

  // Redirect if already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      router.push('/dashboard');
    }
  }, [isAuthenticated, router]);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    clearError();

    if (mode === 'register') {
      // Validation for registration
      if (formData.password !== formData.confirmPassword) {
        return; // Could add local validation error
      }
      if (formData.name.trim().length < 2) {
        return; // Could add local validation error
      }

      const success = await register(formData.name, formData.email, formData.password);
      if (success) {
        setShowSuccess(true);
        setMode('login');
        setFormData(prev => ({ ...prev, name: '', password: '', confirmPassword: '' }));
      }
    } else {
      // Login
      const success = await login(formData.email, formData.password);
      if (success) {
        router.push('/dashboard');
      }
    }
  };

  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    if (error) clearError();
  };

  // Handle mode switch
  const switchMode = () => {
    setMode(mode === 'login' ? 'register' : 'login');
    clearError();
    setShowSuccess(false);
    setFormData({ name: '', email: '', password: '', confirmPassword: '' });
  };

  return (
    <div className="min-h-screen relative">
      {/* Video Background - Now using the layout's video background */}
      
      {/* Main Content */}
      <div className="relative z-10 min-h-screen flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          {/* Cosmic Card with Dynamic Transparency */}
          <div className={`cosmic-card rounded-2xl p-8 shadow-2xl transition-all duration-500 ${
            focusedField ? 'bg-cosmic-void/25 backdrop-blur-sm' : 'bg-cosmic-void/15 backdrop-blur-lg'
          }`}>
            
            {/* Header */}
            <div className={`text-center mb-8 transition-opacity duration-300 ${
              focusedField ? 'opacity-40' : 'opacity-100'
            }`}>
              <div className="inline-flex items-center justify-center space-x-2 mb-4">
                <div className="w-8 h-8 bg-gradient-to-r from-cosmic-star to-cosmic-plasma rounded-full animate-pulse" />
                <h1 className="text-3xl font-bold bg-gradient-to-r from-cosmic-star to-cosmic-plasma bg-clip-text text-transparent">
                  COSMIC
                </h1>
                <div className="w-8 h-8 bg-gradient-to-r from-cosmic-plasma to-cosmic-star rounded-full animate-pulse animation-delay-1000" />
              </div>
              <h2 className="text-2xl font-bold text-white mb-2">
                {mode === 'login' ? 'Welcome Back' : 'Join the Cosmos'}
              </h2>
              <p className="text-cosmic-dust text-sm">
                {mode === 'login' 
                  ? 'Enter your cosmic coordinates' 
                  : 'Create your stellar identity'
                }
              </p>
              <div className="flex items-center justify-center space-x-1 text-xs text-cosmic-dust/60 mt-2">
                <span>‚ú®</span>
                <span>Every mind is a universe</span>
                <span>‚ú®</span>
              </div>
            </div>

            {/* Success Message */}
            {showSuccess && (
              <div className={`mb-6 p-4 bg-green-500/20 border border-green-500/50 rounded-lg text-green-300 text-sm transition-opacity duration-300 ${
                focusedField ? 'opacity-70' : 'opacity-100'
              }`}>
                üöÄ Registration successful! Please check your email to verify your account, then login below.
              </div>
            )}

            {/* Error Message */}
            {error && (
              <div className={`mb-6 p-4 bg-red-500/20 border border-red-500/50 rounded-lg text-red-300 text-sm transition-opacity duration-300 ${
                focusedField ? 'opacity-70' : 'opacity-100'
              }`}>
                ‚ö†Ô∏è {error}
              </div>
            )}

            {/* Mode Toggle */}
            <div className={`flex bg-cosmic-void/50 rounded-lg p-1 border border-cosmic-star/20 mb-6 transition-opacity duration-300 ${
              focusedField ? 'opacity-40' : 'opacity-100'
            }`}>
              <button
                onClick={() => {
                  setMode('login');
                  clearError();
                  setShowSuccess(false);
                }}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-300 ${
                  mode === 'login'
                    ? 'bg-cosmic-star text-white shadow-cosmic-glow'
                    : 'text-cosmic-dust hover:text-white hover:bg-cosmic-star/20'
                }`}
              >
                üöÄ Giri≈ü Yap
              </button>
              <button
                onClick={() => {
                  setMode('register');
                  clearError();
                  setShowSuccess(false);
                }}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all duration-300 ${
                  mode === 'register'
                    ? 'bg-cosmic-star text-white shadow-cosmic-glow'
                    : 'text-cosmic-dust hover:text-white hover:bg-cosmic-star/20'
                }`}
              >
                üåü Kayƒ±t Ol
              </button>
            </div>

            {/* Form */}
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name field (register only) */}
              {mode === 'register' && (
                <div className={`transition-all duration-300 ${
                  focusedField === 'name' ? 'opacity-100 scale-105' : focusedField ? 'opacity-50 scale-95' : 'opacity-100'
                }`}>
                  <label 
                    htmlFor="name" 
                    className={`block text-sm font-medium mb-2 transition-all duration-300 ${
                      focusedField === 'name' ? 'text-cosmic-star font-semibold' : 'text-cosmic-dust'
                    }`}
                  >
                    üë§ Cosmic Name
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    onFocus={() => setFocusedField('name')}
                    onBlur={() => setFocusedField(null)}
                    required
                    disabled={isLoading}
                    className={`cosmic-input w-full px-4 py-3 rounded-lg text-white placeholder-cosmic-dust/60 transition-all duration-300 disabled:opacity-50 ${
                      focusedField === 'name' 
                        ? 'border-cosmic-star/70 shadow-cosmic-glow bg-cosmic-void/80' 
                        : 'border-cosmic-star/30 bg-cosmic-void/50'
                    }`}
                    placeholder="cosmic_explorer"
                  />
                </div>
              )}

              {/* Email field */}
              <div className={`transition-all duration-300 ${
                focusedField === 'email' ? 'opacity-100 scale-105' : focusedField ? 'opacity-50 scale-95' : 'opacity-100'
              }`}>
                <label 
                  htmlFor="email" 
                  className={`block text-sm font-medium mb-2 transition-all duration-300 ${
                    focusedField === 'email' ? 'text-cosmic-star font-semibold' : 'text-cosmic-dust'
                  }`}
                >
                  üìß Email Address
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  onFocus={() => setFocusedField('email')}
                  onBlur={() => setFocusedField(null)}
                  required
                  disabled={isLoading}
                  className={`cosmic-input w-full px-4 py-3 rounded-lg text-white placeholder-cosmic-dust/60 transition-all duration-300 disabled:opacity-50 ${
                    focusedField === 'email' 
                      ? 'border-cosmic-star/70 shadow-cosmic-glow bg-cosmic-void/80' 
                      : 'border-cosmic-star/30 bg-cosmic-void/50'
                  }`}
                  placeholder="cosmic@universe.com"
                />
              </div>

              {/* Password field */}
              <div className={`transition-all duration-300 ${
                focusedField === 'password' ? 'opacity-100 scale-105' : focusedField ? 'opacity-50 scale-95' : 'opacity-100'
              }`}>
                <label 
                  htmlFor="password" 
                  className={`block text-sm font-medium mb-2 transition-all duration-300 ${
                    focusedField === 'password' ? 'text-cosmic-star font-semibold' : 'text-cosmic-dust'
                  }`}
                >
                  üîê Password {mode === 'register' && <span className="text-xs text-cosmic-dust/60">(min 6 chars, 1 special char: !@#$%^&*)</span>}
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  onFocus={() => setFocusedField('password')}
                  onBlur={() => setFocusedField(null)}
                  required
                  disabled={isLoading}
                  className={`cosmic-input w-full px-4 py-3 rounded-lg text-white placeholder-cosmic-dust/60 transition-all duration-300 disabled:opacity-50 ${
                    focusedField === 'password' 
                      ? 'border-cosmic-star/70 shadow-cosmic-glow bg-cosmic-void/80' 
                      : 'border-cosmic-star/30 bg-cosmic-void/50'
                  }`}
                  placeholder={mode === 'register' ? "mypass123!" : "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"}
                />
              </div>

              {/* Confirm Password field (register only) */}
              {mode === 'register' && (
                <div className={`transition-all duration-300 ${
                  focusedField === 'confirmPassword' ? 'opacity-100 scale-105' : focusedField ? 'opacity-50 scale-95' : 'opacity-100'
                }`}>
                  <label 
                    htmlFor="confirmPassword" 
                    className={`block text-sm font-medium mb-2 transition-all duration-300 ${
                      focusedField === 'confirmPassword' ? 'text-cosmic-star font-semibold' : 'text-cosmic-dust'
                    }`}
                  >
                    üîÑ Confirm Password
                  </label>
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    onFocus={() => setFocusedField('confirmPassword')}
                    onBlur={() => setFocusedField(null)}
                    required
                    disabled={isLoading}
                    className={`cosmic-input w-full px-4 py-3 rounded-lg text-white placeholder-cosmic-dust/60 transition-all duration-300 disabled:opacity-50 ${
                      focusedField === 'confirmPassword' 
                        ? 'border-cosmic-star/70 shadow-cosmic-glow bg-cosmic-void/80' 
                        : 'border-cosmic-star/30 bg-cosmic-void/50'
                    }`}
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  />
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isLoading}
                className={`cosmic-button w-full py-3 px-6 bg-gradient-to-r from-cosmic-star to-cosmic-plasma text-white font-semibold rounded-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${
                  focusedField ? 'opacity-70 scale-95' : 'opacity-100 hover:scale-105 hover:shadow-cosmic-glow'
                }`}
              >
                {isLoading ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    <span>{mode === 'login' ? 'Entering Cosmos...' : 'Creating Star System...'}</span>
                  </div>
                ) : (
                  <>
                    {mode === 'login' ? 'üöÄ Enter the Cosmos' : '‚≠ê Create Star System'}
                  </>
                )}
              </button>
            </form>

            {/* Footer */}
            <div className={`mt-6 text-center space-y-2 transition-opacity duration-300 ${
              focusedField ? 'opacity-40' : 'opacity-100'
            }`}>
              <div className="text-xs text-cosmic-dust/60">
                {mode === 'login' ? 'Hen√ºz evrenin bir par√ßasƒ± deƒüil misin?' : 'Zaten evrenin bir par√ßasƒ± mƒ±sƒ±n?'}
              </div>
              <button
                type="button"
                onClick={switchMode}
                disabled={isLoading}
                className="text-cosmic-star hover:text-cosmic-plasma transition-colors duration-200 text-sm font-medium disabled:opacity-50"
              >
                {mode === 'login' ? '‚ú® Yeni evren olu≈ütur' : 'üåå Evrenime geri d√∂n'}
              </button>
            </div>

            {/* Status Indicator */}
            <div className={`mt-6 flex items-center justify-center space-x-2 text-xs transition-opacity duration-300 ${
              focusedField ? 'opacity-30' : 'opacity-100'
            }`}>
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-cosmic-dust/60">Cosmic Network Online</span>
            </div>
          </div>
        </div>
      </div>

      {/* Additional Twinkling Stars (since we removed the static background) */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none z-0">
        {Array.from({ length: 15 }).map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-white rounded-full animate-pulse"
            style={{
              left: `${(i * 7.3) % 100}%`,
              top: `${(i * 11.7) % 100}%`,
              animationDelay: `${(i * 0.3) % 3}s`,
              animationDuration: `${2.5 + (i % 3) * 0.5}s`
            }}
          />
        ))}
      </div>
    </div>
  );
}