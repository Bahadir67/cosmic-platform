// prisma/schema.prisma - FIXED with Complete Relations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üåü STAR SYSTEMS (Users) - Updated with Auth Fields
model StarSystem {
  id                    String    @id @default(cuid())
  username              String    @unique
  email                 String    @unique
  password_hash         String
  display_name          String?
  bio                   String?
  avatar_url            String?
  
  // üîê AUTHENTICATION FIELDS (NEW)
  email_verified        Boolean   @default(false)
  email_verify_token    String?   @unique
  password_reset_token  String?   @unique
  password_reset_expires DateTime?
  last_login_at         DateTime?
  failed_login_attempts Int       @default(0)
  locked_until          DateTime?
  
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Relations
  planets               Planet[]
  content               Content[]
  comments              Comment[]
  reactions             Reaction[]
  galaxy_memberships    GalaxyMember[]
  sessions              Session[]
  aether_analyses       AetherAnalysis[]
  
  // üîß FIXED: Missing relation fields
  created_bridges       Bridge[]        @relation("BridgeCreator")
  created_galaxies      Galaxy[]        @relation("GalaxyCreator")
  created_projects      GalaxyProject[] @relation("ProjectCreator")
  
  @@map("star_systems")
}

// ü™ê PLANETS (Content Categories)
model Planet {
  id              String    @id @default(cuid())
  star_system_id  String
  planet_type     String    // mercury, venus, earth, mars, etc.
  name            String
  description     String?
  color_scheme    String?   // hex color for UI
  is_active       Boolean   @default(true)
  settings        Json?     // planet-specific settings
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  star_system     StarSystem @relation(fields: [star_system_id], references: [id])
  content         Content[]
  
  @@map("planets")
}

// üìù CONTENT (Layers & Satellites)
model Content {
  id              String      @id @default(cuid())
  star_system_id  String
  planet_id       String?
  content_type    String      // layer, satellite, bridge_point
  title           String
  body            String?
  media_urls      String[]    @default([])
  tags            String[]    @default([])
  entropy_score   Float?      // calculated by Aether
  visibility      String      @default("public") // public, galaxy, private
  status          String      @default("active") // active, archived, deleted
  metadata        Json?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  
  // Relations
  star_system     StarSystem  @relation(fields: [star_system_id], references: [id])
  planet          Planet?     @relation(fields: [planet_id], references: [id])
  comments        Comment[]
  reactions       Reaction[]
  bridges_from    Bridge[]    @relation("BridgeFrom")
  bridges_to      Bridge[]    @relation("BridgeTo")
  aether_analyses AetherAnalysis[]
  
  @@map("content")
}

// üåâ BRIDGES (Connections between content)
model Bridge {
  id              String    @id @default(cuid())
  from_content_id String
  to_content_id   String
  bridge_type     String    // reference, inspiration, contrast, etc.
  strength        Float     @default(1.0) // 0.0 to 1.0
  description     String?
  created_by      String
  created_at      DateTime  @default(now())
  
  // Relations
  from_content    Content     @relation("BridgeFrom", fields: [from_content_id], references: [id])
  to_content      Content     @relation("BridgeTo", fields: [to_content_id], references: [id])
  creator         StarSystem  @relation("BridgeCreator", fields: [created_by], references: [id])
  
  @@map("bridges")
}

// üåå GALAXIES (Communities)
model Galaxy {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  avatar_url      String?
  is_public       Boolean   @default(true)
  governance_type String    @default("democratic") // democratic, meritocratic, etc.
  settings        Json?
  created_by      String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  creator         StarSystem      @relation("GalaxyCreator", fields: [created_by], references: [id])
  members         GalaxyMember[]
  projects        GalaxyProject[]
  
  @@map("galaxies")
}

// üë• GALAXY MEMBERS
model GalaxyMember {
  id          String    @id @default(cuid())
  galaxy_id   String
  member_id   String
  role        String    @default("member") // member, moderator, admin
  reputation  Int       @default(0)
  joined_at   DateTime  @default(now())
  
  // Relations
  galaxy      Galaxy     @relation(fields: [galaxy_id], references: [id])
  member      StarSystem @relation(fields: [member_id], references: [id])
  
  @@unique([galaxy_id, member_id])
  @@map("galaxy_members")
}

// üöÄ GALAXY PROJECTS
model GalaxyProject {
  id              String    @id @default(cuid())
  galaxy_id       String
  name            String
  description     String?
  status          String    @default("active") // active, completed, archived
  created_by      String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  galaxy          Galaxy     @relation(fields: [galaxy_id], references: [id])
  creator         StarSystem @relation("ProjectCreator", fields: [created_by], references: [id])
  
  @@map("galaxy_projects")
}

// üí¨ COMMENTS
model Comment {
  id              String    @id @default(cuid())
  content_id      String
  author_id       String
  body            String
  parent_id       String?   // for reply threads
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  content         Content   @relation(fields: [content_id], references: [id])
  author          StarSystem @relation(fields: [author_id], references: [id])
  parent          Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies         Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

// ‚ù§Ô∏è REACTIONS
model Reaction {
  id              String    @id @default(cuid())
  content_id      String
  user_id         String
  reaction_type   String    // like, love, mind_blown, etc.
  created_at      DateTime  @default(now())
  
  // Relations
  content         Content   @relation(fields: [content_id], references: [id])
  user            StarSystem @relation(fields: [user_id], references: [id])
  
  @@unique([content_id, user_id, reaction_type])
  @@map("reactions")
}

// üîê SESSIONS (JWT Token Management)
model Session {
  id              String    @id @default(cuid())
  user_id         String
  token_id        String    @unique
  refresh_token   String    @unique
  expires_at      DateTime
  user_agent      String?
  ip_address      String?
  created_at      DateTime  @default(now())
  
  // Relations
  user            StarSystem @relation(fields: [user_id], references: [id])
  
  @@map("sessions")
}

// ü§ñ AETHER ANALYSIS (AI-powered insights)
model AetherAnalysis {
  id              String    @id @default(cuid())
  content_id      String
  analyzed_by     String
  analysis_type   String    // quality, entropy, bridge_suggestion, etc.
  score           Float?
  insights        Json
  confidence      Float     @default(0.0) // 0.0 to 1.0
  created_at      DateTime  @default(now())
  
  // Relations
  content         Content   @relation(fields: [content_id], references: [id])
  analyzer        StarSystem @relation(fields: [analyzed_by], references: [id])
  
  @@map("aether_analysis")
}